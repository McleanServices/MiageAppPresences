# MIAGE Presences API Documentation

## Table of Contents
- [Authentication](#authentication)
- [Response Format](#response-format)
- [Error Handling](#error-handling)
- [API Endpoints](#api-endpoints)
  - [Presence Management](#presence-management)
  - [QR Code Management](#qr-code-management)
  - [Course Management](#course-management)
  - [Formation Management](#formation-management)
  - [Justification Management](#justification-management)
  - [User Management](#user-management)
  - [Notification Management](#notification-management)

## Authentication

All API endpoints require authentication using JWT (JSON Web Token).

### Authorization Header
```
Authorization: Bearer <your_jwt_token>
```

### Getting a Token
Use the login endpoint to obtain a JWT token:

```bash
POST /miagepresences/api/login
Content-Type: application/json

{
  "email": "user@example.com",
  "mot_de_passe": "password"
}
```

**Response:**
```json
{
  "success": true,
  "message": "Connexion réussie",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": 1,
    "nom": "Doe",
    "prenom": "John",
    "email": "user@example.com",
    "role": "etudiant"
  }
}
```

## Response Format

### Success Response
```json
{
  "success": true,
  "message": "Operation successful",
  "data": { /* response data */ }
}
```

### Error Response
```json
{
  "success": false,
  "message": "Error description",
  "error": "Detailed error message"
}
```

## Error Handling

| Status Code | Description |
|-------------|-------------|
| 200 | Success |
| 201 | Created |
| 400 | Bad Request |
| 401 | Unauthorized |
| 403 | Forbidden |
| 404 | Not Found |
| 409 | Conflict |
| 500 | Internal Server Error |

---

## API Endpoints

## Presence Management

### Record Attendance
**POST** `/miagepresences/api/presences`

Record student attendance for a time slot.

**Request Body:**
```json
{
  "id_utilisateur": 1,
  "id_plage": 1,
  "etat": "present",
  "mode_emargement": "qr",
  "etablie_par_enseignant": false,
  "full_seance_mode": false
}
```

**Response:**
```json
{
  "success": true,
  "message": "Présence enregistrée avec succès",
  "data": {
    "recorded_plages": [1],
    "full_seance_mode": false,
    "total_recorded": 1
  }
}
```

### Get User Attendance Records
**GET** `/miagepresences/api/presences/user/{id}`

Get attendance records for a specific user.

**Query Parameters:**
- `date_debut` (optional): Start date (YYYY-MM-DD)
- `date_fin` (optional): End date (YYYY-MM-DD)
- `cours_id` (optional): Filter by course ID
- `limit` (optional): Number of records (default: 50)
- `offset` (optional): Pagination offset (default: 0)

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id_utilisateur": 1,
      "id_plage": 1,
      "etat": "present",
      "mode_emargement": "qr",
      "heure_debut": "08:00:00",
      "heure_fin": "09:30:00",
      "date": "2025-07-03",
      "cours_nom": "Informatique"
    }
  ],
  "count": 1,
  "pagination": {
    "limit": 50,
    "offset": 0
  }
}
```

### Get Session Attendance
**GET** `/miagepresences/api/presences/seance/{id}`

Get all attendance records for a specific session.

**Response:**
```json
{
  "success": true,
  "seance": {
    "id_seance": 1,
    "date": "2025-07-03",
    "heure_debut": "08:00:00",
    "heure_fin": "11:30:00",
    "cours_nom": "Informatique"
  },
  "presences": [
    {
      "id_utilisateur": 1,
      "nom": "Doe",
      "prenom": "John",
      "etat": "present",
      "mode_emargement": "qr"
    }
  ],
  "count": 1
}
```

### Update Attendance Status
**PATCH** `/miagepresences/api/presences/{userId}/{plageId}`

Update attendance status (teachers/admins only).

**Request Body:**
```json
{
  "etat": "retard",
  "mode_emargement": "manuel",
  "etablie_par_enseignant": true
}
```

### Get Attendance Statistics
**GET** `/miagepresences/api/presences/user/{id}/stats`

Get attendance statistics for a user.

**Query Parameters:**
- `date_debut` (optional): Start date
- `date_fin` (optional): End date

**Response:**
```json
{
  "success": true,
  "data": {
    "total_plages": 20,
    "presences": 18,
    "absences": 2,
    "retards": 0,
    "qr_scans": 15,
    "teacher_validated": 3,
    "attendance_rate": 90.00,
    "period": {
      "date_debut": "2025-01-01",
      "date_fin": "2025-07-03"
    }
  }
}
```

---

## QR Code Management

### Generate QR Code
**POST** `/miagepresences/api/qr/generate`

Generate QR codes for sessions (teachers/admins only).

**Request Body:**
```json
{
  "id_seance": 1,
  "duree_validite": 30,
  "full_seance_mode": false
}
```

**Response:**
```json
{
  "success": true,
  "message": "QR codes générés avec succès",
  "data": {
    "qr_codes": [
      {
        "id_plage": 1,
        "token": "abc123def456",
        "qr_data": "miage_qr_abc123def456",
        "expires_at": "2025-07-03T09:30:00Z"
      }
    ],
    "session_info": {
      "id_seance": 1,
      "cours_nom": "Informatique"
    }
  }
}
```

### Validate QR Code
**POST** `/miagepresences/api/qr/validate`

Validate QR token and record attendance.

**Request Body:**
```json
{
  "qr_data": "miage_qr_abc123def456",
  "id_utilisateur": 1
}
```

**Response:**
```json
{
  "success": true,
  "message": "Présence enregistrée via QR code",
  "data": {
    "presence_recorded": true,
    "plage_info": {
      "id_plage": 1,
      "heure_debut": "08:00:00",
      "heure_fin": "09:30:00"
    }
  }
}
```

### Get Session QR Data
**GET** `/miagepresences/api/qr/session/{id}`

Get QR code information for a session.

### Verify QR Token
**POST** `/miagepresences/api/qr/verify`

Verify QR token without recording attendance.

---

## Course Management

### Get All Courses
**GET** `/miagepresences/api/cours`

Get list of all courses.

**Query Parameters:**
- `limit` (optional): Number of courses (default: 50)
- `offset` (optional): Pagination offset (default: 0)
- `search` (optional): Search term
- `formation_id` (optional): Filter by formation

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id_cours": 1,
      "nom": "Informatique",
      "description": "Cours d'informatique fondamentale",
      "credits": 6,
      "formation_intitule": "MIAGE",
      "total_seances": 15,
      "total_enseignants": 2
    }
  ],
  "count": 1,
  "pagination": {
    "limit": 50,
    "offset": 0
  }
}
```

### Create Course
**POST** `/miagepresences/api/cours`

Create a new course (admin only).

**Request Body:**
```json
{
  "nom": "Nouveau Cours",
  "description": "Description du cours",
  "credits": 4,
  "id_formation": 1
}
```

### Get Course Details
**GET** `/miagepresences/api/cours/{id}`

Get detailed information about a course.

### Update Course
**PATCH** `/miagepresences/api/cours/{id}`

Update course information (admin only).

### Delete Course
**DELETE** `/miagepresences/api/cours/{id}`

Delete a course (admin only).

### Assign Teacher to Course
**POST** `/miagepresences/api/cours/{id}/teachers`

Assign a teacher to a course.

**Request Body:**
```json
{
  "id_enseignant": 2
}
```

### Remove Teacher from Course
**DELETE** `/miagepresences/api/cours/{id}/teachers/{teacherId}`

Remove a teacher from a course.

---

## Formation Management

### Get All Formations
**GET** `/miagepresences/api/formations`

Get list of all academic programs.

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id_formation": 1,
      "intitule": "MIAGE",
      "niveau": "Master",
      "specialite": "Informatique",
      "annee_universitaire": "2024-2025",
      "total_etudiants": 25,
      "total_cours": 8
    }
  ],
  "count": 1
}
```

### Create Formation
**POST** `/miagepresences/api/formations`

Create a new formation (admin only).

**Request Body:**
```json
{
  "intitule": "Nouvelle Formation",
  "niveau": "Master",
  "specialite": "Informatique",
  "annee_universitaire": "2025-2026"
}
```

### Get Formation Details
**GET** `/miagepresences/api/formations/{id}`

Get detailed formation information.

### Get Formation Students
**GET** `/miagepresences/api/formations/{id}/students`

Get all students in a formation.

### Update Formation
**PATCH** `/miagepresences/api/formations/{id}`

Update formation information (admin only).

### Delete Formation
**DELETE** `/miagepresences/api/formations/{id}`

Delete a formation (admin only).

### Assign Student to Formation
**POST** `/miagepresences/api/formations/{id}/students`

Assign a student to a formation.

**Request Body:**
```json
{
  "id_etudiant": 1
}
```

### Get Formation Statistics
**GET** `/miagepresences/api/formations/{id}/stats`

Get statistics for a formation.

---

## Justification Management

### Upload Justification
**POST** `/miagepresences/api/justificatifs`

Upload an absence justification with file.

**Content-Type:** `multipart/form-data`

**Form Data:**
- `fichier`: File upload (PDF, image, etc.)
- `motif`: Reason for absence
- `date_debut`: Start date (YYYY-MM-DD)
- `date_fin`: End date (YYYY-MM-DD)
- `commentaire`: Optional comment

**Response:**
```json
{
  "success": true,
  "message": "Justificatif uploadé avec succès",
  "data": {
    "id_justificatif": 1,
    "nom_fichier": "certificat_medical.pdf",
    "chemin_fichier": "uploads/justificatifs/1_certificat_medical.pdf",
    "statut": "en_attente"
  }
}
```

### Get User Justifications
**GET** `/miagepresences/api/justificatifs/user/{id}`

Get all justifications for a user.

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id_justificatif": 1,
      "motif": "Certificat médical",
      "date_debut": "2025-07-01",
      "date_fin": "2025-07-02",
      "statut": "valide",
      "nom_fichier": "certificat_medical.pdf",
      "date_soumission": "2025-07-01T10:00:00Z"
    }
  ],
  "count": 1
}
```

### Validate Justification
**PATCH** `/miagepresences/api/justificatifs/{id}/validate`

Validate or reject a justification (admin only).

**Request Body:**
```json
{
  "statut": "valide",
  "commentaire_admin": "Justificatif accepté"
}
```

### Get Pending Justifications
**GET** `/miagepresences/api/justificatifs/pending`

Get all pending justifications (admin only).

### Get Justification by ID
**GET** `/miagepresences/api/justificatifs/{id}`

Get specific justification details.

### Download Justification File
**GET** `/miagepresences/api/justificatifs/{id}/download`

Download the justification file.

### Delete Justification
**DELETE** `/miagepresences/api/justificatifs/{id}`

Delete a justification.

---

## User Management

### Get All Students
**GET** `/miagepresences/api/etudiants`

Get list of all students.

**Query Parameters:**
- `limit` (optional): Number of students (default: 50)
- `offset` (optional): Pagination offset (default: 0)
- `search` (optional): Search term
- `formation_id` (optional): Filter by formation
- `statut_inscription` (optional): Filter by enrollment status

**Response:**
```json
{
  "success": true,
  "data": [
    {
      "id_utilisateur": 1,
      "nom": "Doe",
      "prenom": "John",
      "email": "john.doe@example.com",
      "numero_etudiant": "20250001",
      "formation_intitule": "MIAGE",
      "statut_inscription": "actif",
      "total_presences": 45
    }
  ],
  "count": 1
}
```

### Create Student Profile
**POST** `/miagepresences/api/etudiants`

Create a new student profile (admin only).

**Request Body:**
```json
{
  "nom": "Nouveau",
  "prenom": "Etudiant",
  "email": "etudiant@example.com",
  "numero_etudiant": "20250002",
  "id_formation": 1,
  "mot_de_passe": "password123"
}
```

### Get All Teachers
**GET** `/miagepresences/api/enseignants`

Get list of all teachers.

### Get Teacher Courses
**GET** `/miagepresences/api/enseignants/{id}/courses`

Get courses taught by a teacher.

### Create Teacher Profile
**POST** `/miagepresences/api/enseignants`

Create a new teacher profile (admin only).

### Update User Role
**PATCH** `/miagepresences/api/users/{id}/role`

Update user role and type (admin only).

**Request Body:**
```json
{
  "role": "enseignant",
  "type_utilisateur": "interne"
}
```

### Promote to Admin
**POST** `/miagepresences/api/users/{id}/promote-admin`

Promote a teacher to admin (admin only).

### Revoke Admin Privileges
**DELETE** `/miagepresences/api/users/{id}/admin-privileges`

Revoke admin privileges (admin only).

---

## Notification Management

### Create Notification
**POST** `/miagepresences/api/notifications`

Create a new notification.

**Request Body:**
```json
{
  "id_utilisateur": 1,
  "titre": "Nouvelle notification",
  "message": "Contenu de la notification",
  "type": "info",
  "cle_notification": "absence_alert"
}
```

### Get User Notifications
**GET** `/miagepresences/api/notifications/user/{id_utilisateur}`

Get all notifications for a user.

### Get Notification by ID
**GET** `/miagepresences/api/notifications/{id}`

Get specific notification details.

### Get Notifications by Key
**GET** `/miagepresences/api/notifications/key/{cle_notification}`

Get notifications by notification key.

### Update Notification
**PATCH** `/miagepresences/api/notifications/{id}`

Update notification details.

### Mark Notification as Read
**PATCH** `/miagepresences/api/notifications/{id}/read`

Mark a notification as read.

### Send Notification
**PATCH** `/miagepresences/api/notifications/{id}/send`

Mark notification as sent.

### Delete Notification
**DELETE** `/miagepresences/api/notifications/{id}`

Delete a notification.

### Get Notification Statistics
**GET** `/miagepresences/api/notifications/user/{id_utilisateur}/stats`

Get notification statistics for a user.

### Update User Notification Key
**PATCH** `/miagepresences/api/notifications/user/{id_utilisateur}/key`

Update user's notification key.

### Get User Notification Key
**GET** `/miagepresences/api/notifications/user/{id_utilisateur}/key`

Get user's notification key.

---

## Example Usage

### Complete Attendance Flow

1. **Generate QR Code (Teacher)**
```bash
curl -X POST http://localhost:8082/miagepresences/api/qr/generate \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"id_seance": 1, "duree_validite": 30}'
```

2. **Scan QR Code (Student)**
```bash
curl -X POST http://localhost:8082/miagepresences/api/qr/validate \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{"qr_data": "miage_qr_abc123", "id_utilisateur": 1}'
```

3. **Check Attendance (Teacher)**
```bash
curl -X GET http://localhost:8082/miagepresences/api/presences/seance/1 \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### File Upload Example

```bash
curl -X POST http://localhost:8082/miagepresences/api/justificatifs \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -F "fichier=@certificat.pdf" \
  -F "motif=Certificat médical" \
  -F "date_debut=2025-07-01" \
  -F "date_fin=2025-07-02"
```

---

## API Rate Limits

- **Default**: 100 requests per minute per user
- **File uploads**: 10 requests per minute per user
- **QR generation**: 20 requests per minute per teacher

## Supported File Types

**Justification uploads:**
- PDF (.pdf)
- Images (.jpg, .jpeg, .png, .gif)
- Documents (.doc, .docx)
- Maximum file size: 10MB

---

## Support

For API support and questions, please contact the development team or refer to the project documentation.

**Base URL:** `http://localhost:8082/miagepresences/api`

**API Version:** 1.0.0

**Last Updated:** July 3, 2025
